version: 0.0.1
title: Pinecone Metrics
description: Metrics receiver for Pinecone
parameters:
  - name: environment
    description: Environment of your project  (example us-east4-gcp)
    type: string
    required: true
  - name: api_key
    description: The api key of your pinecone environment
    type: string
    required: true
  - name: scrape_interval
    description: Time in between every scrape request
    type: string
    default: 60s
template: |
  receivers:
    prometheus/pinecone:
      config:
        scrape_configs:
          - job_name: 'pinecone'
            scrape_interval: '{{ .scrape_interval }}'
            authorization:
              credentials: '{{ .api_key }}'
            scheme: https
            static_configs:
              - targets: ['metrics.{{ .environment }}.pinecone.io']
            metric_relabel_configs:
              # Include only a few key metrics
              - source_labels: [ __name__ ]
                regex: "(pinecone_vector_count)|\
                  (pinecone_request_count_total)|\
                  (pinecone_request_error_count_total)|\
                  (pinecone_request_latency_seconds)|\
                  (pinecone_request_latency_seconds_sum)|\
                  (pinecone_request_latency_seconds_count)|\
                  (pinecone_index_fullness)"
                action: keep
  processors:
    filter/pinecone:
      # Filter out prometheus scraping meta-metrics.
      metrics:
        exclude:
          match_type: strict
          metric_names:
            - scrape_samples_post_metric_relabeling
            - scrape_series_added
            - scrape_duration_seconds
            - scrape_samples_scraped
            - up
    metricstransform/pinecone:
      transforms:
        - include: pinecone_vector_count
          match_type: strict
          action: update
          new_name: "pinecone.vector.count"
        - include: pinecone_request_count_total
          match_type: strict
          action: update
          new_name: "pinecone.request.count"
        - include: pinecone_request_error_count_total
          match_type: strict
          action: update
          new_name: "pinecone.request.error.count"
        - include: pinecone_request_latency_seconds
          match_type: strict
          action: update
          new_name: "pinecone.request.latency"
        - include: pinecone_index_fullness
          match_type: strict
          action: update
          new_name: "pinecone.index.fullness"

    transform/pinecone:
      metric_statements:
      - context: datapoint
        statements:
        - convert_gauge_to_sum("cumulative", false) where metric.name == "pinecone.vector.count"
        - convert_gauge_to_sum("cumulative", true) where metric.name == "pinecone.request.count"
        - convert_gauge_to_sum("cumulative", true) where metric.name == "pinecone.request.error.count"
      - context: metric
        statements:
        - set(description, "Number of items per pod in the index.") where name == "pinecone.vector.count"
        - set(unit, "{items}") where name == "pinecone.vector.count"

        - set(description, "Number of data plane calls made by clients.") where name == "pinecone.request.count"
        - set(unit, "{requests}") where name == "pinecone.request.count"

        - set(description, "Number of data plane calls made by clients that resulted in errors.") where name == "pinecone.request.error.count"
        - set(unit, "requests") where name == "pinecone.request.error.count"

        - set(description, "Distribution of server-side processing latency for pinecone data plane calls.") where name == "pinecone.request.latency"
        - set(unit, 1) where name == "pinecone.request.latency"

        - set(description, "The fullness of the index on a scale of 0 to 1.") where name == "pinecone.index.fullness"
        - set(unit, "1") where name == "pinecone.index.fullness"

  service:
    pipelines:
      metrics/pinecone:
        receivers: [prometheus/pinecone]
        processors: [filter/pinecone, metricstransform/pinecone, transform/pinecone]
