// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricSettings) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsSettings provides settings for apachedruidreceiver metrics.
type MetricsSettings struct {
	ApachedruidBrokerAverageQueryTime     MetricSettings `mapstructure:"apachedruid.broker.average_query_time"`
	ApachedruidBrokerFailedQueryCount     MetricSettings `mapstructure:"apachedruid.broker.failed_query_count"`
	ApachedruidBrokerQueryCount           MetricSettings `mapstructure:"apachedruid.broker.query_count"`
	ApachedruidHistoricalAverageQueryTime MetricSettings `mapstructure:"apachedruid.historical.average_query_time"`
	ApachedruidHistoricalFailedQueryCount MetricSettings `mapstructure:"apachedruid.historical.failed_query_count"`
	ApachedruidHistoricalQueryCount       MetricSettings `mapstructure:"apachedruid.historical.query_count"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		ApachedruidBrokerAverageQueryTime: MetricSettings{
			Enabled: true,
		},
		ApachedruidBrokerFailedQueryCount: MetricSettings{
			Enabled: true,
		},
		ApachedruidBrokerQueryCount: MetricSettings{
			Enabled: true,
		},
		ApachedruidHistoricalAverageQueryTime: MetricSettings{
			Enabled: true,
		},
		ApachedruidHistoricalFailedQueryCount: MetricSettings{
			Enabled: true,
		},
		ApachedruidHistoricalQueryCount: MetricSettings{
			Enabled: true,
		},
	}
}

// ResourceAttributeSettings provides common settings for a particular metric.
type ResourceAttributeSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// ResourceAttributesSettings provides settings for apachedruidreceiver metrics.
type ResourceAttributesSettings struct {
	ApachedruidNodeName ResourceAttributeSettings `mapstructure:"apachedruid.node.name"`
}

func DefaultResourceAttributesSettings() ResourceAttributesSettings {
	return ResourceAttributesSettings{
		ApachedruidNodeName: ResourceAttributeSettings{
			Enabled: true,
		},
	}
}

type metricApachedruidBrokerAverageQueryTime struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills apachedruid.broker.average_query_time metric with initial data.
func (m *metricApachedruidBrokerAverageQueryTime) init() {
	m.data.SetName("apachedruid.broker.average_query_time")
	m.data.SetDescription("The average number of milliseconds taken to complete a query on broker processes.")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
}

func (m *metricApachedruidBrokerAverageQueryTime) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricApachedruidBrokerAverageQueryTime) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricApachedruidBrokerAverageQueryTime) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricApachedruidBrokerAverageQueryTime(settings MetricSettings) metricApachedruidBrokerAverageQueryTime {
	m := metricApachedruidBrokerAverageQueryTime{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricApachedruidBrokerFailedQueryCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills apachedruid.broker.failed_query_count metric with initial data.
func (m *metricApachedruidBrokerFailedQueryCount) init() {
	m.data.SetName("apachedruid.broker.failed_query_count")
	m.data.SetDescription("Total number of failed queries on broker processes since the previous data point.")
	m.data.SetUnit("")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricApachedruidBrokerFailedQueryCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricApachedruidBrokerFailedQueryCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricApachedruidBrokerFailedQueryCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricApachedruidBrokerFailedQueryCount(settings MetricSettings) metricApachedruidBrokerFailedQueryCount {
	m := metricApachedruidBrokerFailedQueryCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricApachedruidBrokerQueryCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills apachedruid.broker.query_count metric with initial data.
func (m *metricApachedruidBrokerQueryCount) init() {
	m.data.SetName("apachedruid.broker.query_count")
	m.data.SetDescription("Total number of queries executed on broker processes since the previous data point.")
	m.data.SetUnit("")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricApachedruidBrokerQueryCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricApachedruidBrokerQueryCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricApachedruidBrokerQueryCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricApachedruidBrokerQueryCount(settings MetricSettings) metricApachedruidBrokerQueryCount {
	m := metricApachedruidBrokerQueryCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricApachedruidHistoricalAverageQueryTime struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills apachedruid.historical.average_query_time metric with initial data.
func (m *metricApachedruidHistoricalAverageQueryTime) init() {
	m.data.SetName("apachedruid.historical.average_query_time")
	m.data.SetDescription("The average number of milliseconds taken to complete a query on historical processes.")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
}

func (m *metricApachedruidHistoricalAverageQueryTime) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricApachedruidHistoricalAverageQueryTime) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricApachedruidHistoricalAverageQueryTime) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricApachedruidHistoricalAverageQueryTime(settings MetricSettings) metricApachedruidHistoricalAverageQueryTime {
	m := metricApachedruidHistoricalAverageQueryTime{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricApachedruidHistoricalFailedQueryCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills apachedruid.historical.failed_query_count metric with initial data.
func (m *metricApachedruidHistoricalFailedQueryCount) init() {
	m.data.SetName("apachedruid.historical.failed_query_count")
	m.data.SetDescription("Total number of failed queries on historical processes since the previous data point.")
	m.data.SetUnit("")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricApachedruidHistoricalFailedQueryCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricApachedruidHistoricalFailedQueryCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricApachedruidHistoricalFailedQueryCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricApachedruidHistoricalFailedQueryCount(settings MetricSettings) metricApachedruidHistoricalFailedQueryCount {
	m := metricApachedruidHistoricalFailedQueryCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricApachedruidHistoricalQueryCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills apachedruid.historical.query_count metric with initial data.
func (m *metricApachedruidHistoricalQueryCount) init() {
	m.data.SetName("apachedruid.historical.query_count")
	m.data.SetDescription("Total number of queries executed on historical processes since the previous data point.")
	m.data.SetUnit("")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricApachedruidHistoricalQueryCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricApachedruidHistoricalQueryCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricApachedruidHistoricalQueryCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricApachedruidHistoricalQueryCount(settings MetricSettings) metricApachedruidHistoricalQueryCount {
	m := metricApachedruidHistoricalQueryCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilderConfig is a structural subset of an otherwise 1-1 copy of metadata.yaml
type MetricsBuilderConfig struct {
	Metrics            MetricsSettings            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesSettings `mapstructure:"resource_attributes"`
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                                   pcommon.Timestamp   // start time that will be applied to all recorded data points.
	metricsCapacity                             int                 // maximum observed number of metrics per resource.
	resourceCapacity                            int                 // maximum observed number of resource attributes.
	metricsBuffer                               pmetric.Metrics     // accumulates metrics data before emitting.
	buildInfo                                   component.BuildInfo // contains version information
	resourceAttributesSettings                  ResourceAttributesSettings
	metricApachedruidBrokerAverageQueryTime     metricApachedruidBrokerAverageQueryTime
	metricApachedruidBrokerFailedQueryCount     metricApachedruidBrokerFailedQueryCount
	metricApachedruidBrokerQueryCount           metricApachedruidBrokerQueryCount
	metricApachedruidHistoricalAverageQueryTime metricApachedruidHistoricalAverageQueryTime
	metricApachedruidHistoricalFailedQueryCount metricApachedruidHistoricalFailedQueryCount
	metricApachedruidHistoricalQueryCount       metricApachedruidHistoricalQueryCount
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsSettings(),
		ResourceAttributes: DefaultResourceAttributesSettings(),
	}
}

func NewMetricsBuilderConfig(ms MetricsSettings, ras ResourceAttributesSettings) MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            ms,
		ResourceAttributes: ras,
	}
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.CreateSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                                   pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                               pmetric.NewMetrics(),
		buildInfo:                                   settings.BuildInfo,
		resourceAttributesSettings:                  mbc.ResourceAttributes,
		metricApachedruidBrokerAverageQueryTime:     newMetricApachedruidBrokerAverageQueryTime(mbc.Metrics.ApachedruidBrokerAverageQueryTime),
		metricApachedruidBrokerFailedQueryCount:     newMetricApachedruidBrokerFailedQueryCount(mbc.Metrics.ApachedruidBrokerFailedQueryCount),
		metricApachedruidBrokerQueryCount:           newMetricApachedruidBrokerQueryCount(mbc.Metrics.ApachedruidBrokerQueryCount),
		metricApachedruidHistoricalAverageQueryTime: newMetricApachedruidHistoricalAverageQueryTime(mbc.Metrics.ApachedruidHistoricalAverageQueryTime),
		metricApachedruidHistoricalFailedQueryCount: newMetricApachedruidHistoricalFailedQueryCount(mbc.Metrics.ApachedruidHistoricalFailedQueryCount),
		metricApachedruidHistoricalQueryCount:       newMetricApachedruidHistoricalQueryCount(mbc.Metrics.ApachedruidHistoricalQueryCount),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(ResourceAttributesSettings, pmetric.ResourceMetrics)

// WithApachedruidNodeName sets provided value as "apachedruid.node.name" attribute for current resource.
func WithApachedruidNodeName(val string) ResourceMetricsOption {
	return func(ras ResourceAttributesSettings, rm pmetric.ResourceMetrics) {
		if ras.ApachedruidNodeName.Enabled {
			rm.Resource().Attributes().PutStr("apachedruid.node.name", val)
		}
	}
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(ras ResourceAttributesSettings, rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/apachedruidreceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricApachedruidBrokerAverageQueryTime.emit(ils.Metrics())
	mb.metricApachedruidBrokerFailedQueryCount.emit(ils.Metrics())
	mb.metricApachedruidBrokerQueryCount.emit(ils.Metrics())
	mb.metricApachedruidHistoricalAverageQueryTime.emit(ils.Metrics())
	mb.metricApachedruidHistoricalFailedQueryCount.emit(ils.Metrics())
	mb.metricApachedruidHistoricalQueryCount.emit(ils.Metrics())

	for _, op := range rmo {
		op(mb.resourceAttributesSettings, rm)
	}
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordApachedruidBrokerAverageQueryTimeDataPoint adds a data point to apachedruid.broker.average_query_time metric.
func (mb *MetricsBuilder) RecordApachedruidBrokerAverageQueryTimeDataPoint(ts pcommon.Timestamp, val float64) {
	mb.metricApachedruidBrokerAverageQueryTime.recordDataPoint(mb.startTime, ts, val)
}

// RecordApachedruidBrokerFailedQueryCountDataPoint adds a data point to apachedruid.broker.failed_query_count metric.
func (mb *MetricsBuilder) RecordApachedruidBrokerFailedQueryCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricApachedruidBrokerFailedQueryCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordApachedruidBrokerQueryCountDataPoint adds a data point to apachedruid.broker.query_count metric.
func (mb *MetricsBuilder) RecordApachedruidBrokerQueryCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricApachedruidBrokerQueryCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordApachedruidHistoricalAverageQueryTimeDataPoint adds a data point to apachedruid.historical.average_query_time metric.
func (mb *MetricsBuilder) RecordApachedruidHistoricalAverageQueryTimeDataPoint(ts pcommon.Timestamp, val float64) {
	mb.metricApachedruidHistoricalAverageQueryTime.recordDataPoint(mb.startTime, ts, val)
}

// RecordApachedruidHistoricalFailedQueryCountDataPoint adds a data point to apachedruid.historical.failed_query_count metric.
func (mb *MetricsBuilder) RecordApachedruidHistoricalFailedQueryCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricApachedruidHistoricalFailedQueryCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordApachedruidHistoricalQueryCountDataPoint adds a data point to apachedruid.historical.query_count metric.
func (mb *MetricsBuilder) RecordApachedruidHistoricalQueryCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricApachedruidHistoricalQueryCount.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
